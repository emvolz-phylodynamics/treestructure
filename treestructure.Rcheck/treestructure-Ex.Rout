
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "treestructure"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('treestructure')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("addtips")
> ### * addtips
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addtips
> ### Title: Compare and add tips into new treestructure object
> ### Aliases: addtips
> 
> ### ** Examples
> 
> set.seed(072023)
> # simulate two trees and bind them to simulate structure
> tr1 <- ape::rcoal( 50 )
> tr2 <- ape::rcoal( 100 )
> tr1$tip.label <- gsub(tr1$tip.label, patt = 't', rep = 's')
> tr1$edge.length <- tr1$edge.length*.5
> tr1$root.edge <- 1
> tr2$root.edge <- 1
> tr <- ape::bind.tree(tr1, tr2, position = .5 ) |> ape::multi2di()
> 
> # subsample the tree to simulating missing tips and estimate structure
> ex <- sample( tr$tip.label, size = 30, replace = FALSE)
> tr0 <- ape::drop.tip( tr, ex )
> (s0 <- treestructure::trestruct( tr0 ))
Finding splits under nodes: 121 
Finding splits under nodes: 121 163 
Call: 
.trestruct(tre = tre, minCladeSize = minCladeSize, minOverlap = minOverlap, 
    nodeSupportValues = nodeSupportValues, nodeSupportThreshold = nodeSupportThreshold, 
    nsim = nsim, level = level[1], ncpu = ncpu, verbosity = verbosity, 
    debugLevel = debugLevel, useNodeSupport = useNodeSupport, 
    tredat = tredat)

Significance level: 0.01 
Number of clusters: 2 
Number of partitions: 2 
Number of taxa in each cluster:

 1  2 
42 78 
Number of taxa in each partition:

 1  2 
42 78 
...
For complete data, use `as.data.frame(...)` 
> 
> # assign structure to the previously missing tips
> (s <- treestructure::addtips( s0, tr ))
Call: 
.trestruct(tre = tre, minCladeSize = minCladeSize, minOverlap = minOverlap, 
    nodeSupportValues = nodeSupportValues, nodeSupportThreshold = nodeSupportThreshold, 
    nsim = nsim, level = level[1], ncpu = ncpu, verbosity = verbosity, 
    debugLevel = debugLevel, useNodeSupport = useNodeSupport, 
    tredat = tredat)

Significance level: 0.01 
Number of clusters: 2 
Number of partitions: 2 
Number of taxa in each cluster:

  1   2 
 50 100 
Number of taxa in each partition:

  1   2 
 50 100 
...
For complete data, use `as.data.frame(...)` 
> 
> 
> 
> cleanEx()
> nameEx("plot.TreeStructure")
> ### * plot.TreeStructure
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.TreeStructure
> ### Title: Plot TreeStructure tree with cluster and partition variables
> ### Aliases: plot.TreeStructure
> 
> ### ** Examples
> 
> 
> tree <- ape::read.tree( system.file('sim.nwk', package = 'treestructure') )
> 
> (struc <- trestruct( tree ))
Tree has NA or duplicated tip labels. Adding a unique id.
Finding splits under nodes: 276 
Finding splits under nodes: 276 526 
Finding splits under nodes: 276 421 
Finding splits under nodes: 276 473 
Call: 
.trestruct(tre = tre, minCladeSize = minCladeSize, minOverlap = minOverlap, 
    nodeSupportValues = nodeSupportValues, nodeSupportThreshold = nodeSupportThreshold, 
    nsim = nsim, level = level[1], ncpu = ncpu, verbosity = verbosity, 
    debugLevel = debugLevel, useNodeSupport = useNodeSupport, 
    tredat = tredat)

Significance level: 0.01 
Number of clusters: 4 
Number of partitions: 2 
Number of taxa in each cluster:

  1   2   3   4 
 25  25 200  25 
Number of taxa in each partition:

  1   2 
 75 200 
...
For complete data, use `as.data.frame(...)` 
> 
> #plot treestructure object
> 
> plot(struc)
> 
> 
> 
> cleanEx()
> nameEx("treestructure.test")
> ### * treestructure.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: treestructure.test
> ### Title: Test treestructure hypothesis
> ### Aliases: treestructure.test
> 
> ### ** Examples
> 
> tree <- ape::read.tree( system.file('sim.nwk', package = 'treestructure') )
> 
> (struc <- trestruct( tree ))
Tree has NA or duplicated tip labels. Adding a unique id.
Finding splits under nodes: 276 
Finding splits under nodes: 276 526 
Finding splits under nodes: 276 421 
Finding splits under nodes: 276 473 
Call: 
.trestruct(tre = tre, minCladeSize = minCladeSize, minOverlap = minOverlap, 
    nodeSupportValues = nodeSupportValues, nodeSupportThreshold = nodeSupportThreshold, 
    nsim = nsim, level = level[1], ncpu = ncpu, verbosity = verbosity, 
    debugLevel = debugLevel, useNodeSupport = useNodeSupport, 
    tredat = tredat)

Significance level: 0.01 
Number of clusters: 4 
Number of partitions: 2 
Number of taxa in each cluster:

  1   2   3   4 
 25  25 200  25 
Number of taxa in each partition:

  1   2 
 75 200 
...
For complete data, use `as.data.frame(...)` 
> 
> #run the test
> 
> results <- treestructure.test(tree, x = struc$clusterSets[[1]],
+                               y = struc$clusterSets[[2]])
Tree has NA or duplicated tip labels. Adding a unique id.
> 
> print(results)
     Treestructure rank-sum test
     
data: 
Phylogenetic tree with 275 tips and 274 internal nodes.

Tip labels:
  1_1, 2_1, 3_1, 4_1, 5_1, 6_1, ...

Rooted; includes branch length(s).
Rank sum = 638, p-value = 0.1477
Alternative hypothesis: Rank sum differs from coalescent distribution
95 percent confidence interval:
  493  682.025
> 
> 
> 
> cleanEx()
> nameEx("trestruct")
> ### * trestruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trestruct
> ### Title: Detect cryptic population structure in time trees
> ### Aliases: trestruct
> 
> ### ** Examples
> 
> tree <- ape::rcoal(50)
> struct <-  trestruct( tree )
Finding splits under nodes: 51 
> print(struct)
Call: 
.trestruct(tre = tre, minCladeSize = minCladeSize, minOverlap = minOverlap, 
    nodeSupportValues = nodeSupportValues, nodeSupportThreshold = nodeSupportThreshold, 
    nsim = nsim, level = level[1], ncpu = ncpu, verbosity = verbosity, 
    debugLevel = debugLevel, useNodeSupport = useNodeSupport, 
    tredat = tredat)

Significance level: 0.01 
Number of clusters: 1 
Number of partitions: 1 
Number of taxa in each cluster:

 1 
50 
Number of taxa in each partition:

 1 
50 
...
For complete data, use `as.data.frame(...)` 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  8.48 0.084 8.619 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
